#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import gspread
import shutil
import subprocess
import re

# Configuration
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL', 'https://docs.google.com/spreadsheets/d/1uEbsT3PZ8tdwiU1Xga_hS6uPve2H74xD5wUci0EcT0Q/edit?gid=0#gid=0')
GOOGLE_SHEET_NAME = os.getenv('GOOGLE_SHEET_NAME', '‡∏ä‡∏µ‡∏ï1')
USERNAME = "01000566"
PASSWORD = "01000566"

JOBNO_PAT = re.compile(r"No\d+(?:-\d+)?", re.IGNORECASE)

def looks_like_jobno(text: str) -> bool:
    t = (text or "").strip()
    if not t:
        return False
    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '‡∏ö‡∏ö‡∏•‡∏ô‡∏õ' ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Job No ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if t.startswith("‡∏ö‡∏ö‡∏•‡∏ô‡∏õ"):
        return True
    # ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô No\d+(-\d+)? ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    return bool(JOBNO_PAT.search(t))

def fetch_jobs_by_tab(driver, tab):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ñ‡∏ß‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ index?tab=<tab>
    - tab=16: ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ rowsPerPage=100000 ‡πÅ‡∏•‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÉ‡∏ä‡πâ parse_row_by_tab
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô [col1..col7]
    """
    try:
        tab_int = int(tab)
        base = "https://jobm.edoclite.com/jobManagement/pages/index"
        url = f"{base}?tab={tab_int}"
        if tab_int == 16:
            url += "&rowsPerPage=100000"  # ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        print(f"üì• Fetching jobs from tab={tab_int} ...")
        driver.get(url)

        # ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ tab=16
        wait_sec = 60 if tab_int == 16 else 30
        WebDriverWait(driver, wait_sec).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr"))
        )

        rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        data = []

        # ‡πÉ‡∏ä‡πâ parser ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ tab=16 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏¥‡∏°
        use_parse_by_tab = (tab_int == 16) and ('parse_row_by_tab' in globals())

        for row in rows:
            parsed = parse_row_by_tab(row, tab_int) if use_parse_by_tab else parse_row(row)
            if parsed:
                data.append(parsed)

        print(f"üìä Found {len(data)} rows on tab={tab_int}")
        return data
    except Exception as e:
        print(f"‚ùå Error fetching tab={tab}: {e}")
        return []

INTERNAL_CENTER = "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏•‡∏≤‡∏á"

def adjust_internal_centers(job: list) -> list:
    """‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ C=‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÅ‡∏à‡πâ‡∏á, D=‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö = INTERNAL_CENTER"""
    arr = (job or [])[:]
    while len(arr) < 7:
        arr.append("")
    arr[2] = INTERNAL_CENTER  # C = ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á
    arr[3] = INTERNAL_CENTER  # D = ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
    return arr



def clean_html(cell):
    try:
        return BeautifulSoup(cell.get_attribute("innerHTML").strip(), "html.parser").get_text(strip=True)
    except Exception as e:
        print(f"‚ö†Ô∏è Error cleaning HTML: {e}")
        return ""

def parse_row(row):
    try:
        cols = row.find_elements(By.TAG_NAME, "td")
        if len(cols) < 8:
            return None
        return [clean_html(cols[i]) for i in range(1, 8)]
    except Exception as e:
        print(f"‚ö†Ô∏è Error parsing row: {e}")
        return None
        
def parse_row_by_tab(row, tab: int):
    """
    ‡∏Ñ‡∏∑‡∏ô list 7 ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô parse_row() ‡πÅ‡∏ï‡πà:
    - tab=16: ‡∏î‡∏±‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Job No.' ‡∏Å‡∏±‡∏ö '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á' ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ
              ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '‡∏ö‡∏ö‡∏•‡∏ô‡∏õ' ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Job No
              ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Job No ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '‡πÅ‡∏™‡∏î‡∏á' (‡∏ï‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á '/')
    """
    cols = row.find_elements(By.TAG_NAME, "td")
    if len(cols) < 8:
        return None

    # ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö)
    raw = [clean_html(cols[i]) for i in range(1, 8)]

    if tab == 16:
        # helper ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏ß‡πà‡∏≤ "‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Job No" ‡πÑ‡∏´‡∏°
        def _looks_like_jobno(t: str) -> bool:
            t = (t or "").strip()
            if not t:
                return False
            # ‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '‡∏ö‡∏ö‡∏•‡∏ô‡∏õ' ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Job No ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if t.startswith("‡∏ö‡∏ö‡∏•‡∏ô‡∏õ"):
                return True
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö No68-0033 / No0065 ‡∏Ø‡∏•‡∏Ø (‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î)
            return bool(re.search(r"No\d+(?:-\d+)?", t, flags=re.IGNORECASE))

        has0 = _looks_like_jobno(raw[0])
        has1 = _looks_like_jobno(raw[1])

        # ‡∏ñ‡πâ‡∏≤ col0 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà job ‡πÅ‡∏ï‡πà col1 ‡πÉ‡∏ä‡πà -> ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if (not has0) and has1:
            raw[0], raw[1] = raw[1], raw[0]

        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Job No ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '‡πÅ‡∏™‡∏î‡∏á' (‡∏Ñ‡∏á prefix ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á '/')
        raw[0] = clean_job_no_display(raw[0])

    return raw



def normalize_job_no(job_no: str) -> str:
    if not job_no:
        return ""
    return job_no.split("/")[0].strip().lower()

def clean_job_no_display(s: str) -> str:
    if not s:
        return ""
    return s.split("/")[0].strip()


def adjust_cols_for_sheet(job: list) -> list:
    """
    ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tab=15 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    - Job No: ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á '/' ‡∏≠‡∏≠‡∏Å
    - ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á (col C) -> ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
    - ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ 1 ‡∏ä‡πà‡∏≠‡∏á
    """
    arr = (job or [])[:]
    while len(arr) < 7:
        arr.append("")
    # ‡πÇ‡∏Ñ‡∏£‡∏á‡πÉ‡∏´‡∏°‡πà: [A(JobNo), B, ''(C), D<-‡πÄ‡∏î‡∏¥‡∏°C, E<-‡πÄ‡∏î‡∏¥‡∏°D, F<-‡πÄ‡∏î‡∏¥‡∏°E, G<-‡πÄ‡∏î‡∏¥‡∏°F]
    return [clean_job_no_display(arr[0]), arr[1], "", arr[2], arr[3], arr[4], arr[5]]
    
def _detect_chrome_binary():
    # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Chrome binary
    # 1) ‡∏à‡∏≤‡∏Å env CHROME_BIN (‡∏°‡∏≤‡∏à‡∏≤‡∏Å setup-chrome action)
    env_bin = os.getenv("CHROME_BIN")
    if env_bin and os.path.exists(env_bin):
        return env_bin

    # 2) ‡∏Ñ‡πà‡∏≤ default ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
    candidates = [
        "/usr/bin/google-chrome",
        "/usr/bin/chromium-browser",
        "/usr/bin/chromium",
        "/opt/google/chrome/chrome",
    ]
    for c in candidates:
        if os.path.exists(c):
            return c

    # 3) which
    which = shutil.which("google-chrome") or shutil.which("chromium") or shutil.which("chromium-browser")
    return which

def _detect_chromedriver():
    # 1) ‡∏à‡∏≤‡∏Å env CHROMEDRIVER (‡∏°‡∏≤‡∏à‡∏≤‡∏Å setup-chrome action)
    env_drv = os.getenv("CHROMEDRIVER")
    if env_drv and os.path.exists(env_drv):
        return env_drv

    # 2) PATH
    which = shutil.which("chromedriver")
    if which:
        return which

    # 3) ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï
    for c in ["/usr/local/bin/chromedriver", "/usr/bin/chromedriver"]:
        if os.path.exists(c):
            return c
    return None

def setup_driver():
    """Setup Chrome WebDriver with multi-fallback; prefer Selenium Manager"""
    print("üîß Setting up Chrome WebDriver...")
    options = Options()
    # headless ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ö‡∏ô GHA
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-features=TranslateUI")
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--disable-ipc-flooding-protection")
    options.add_argument("--remote-debugging-port=9222")

    # ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î JavaScript/Images ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ß‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ login/render
    # options.add_argument("--disable-images")  # ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î
    # options.add_argument("--disable-javascript")

    chrome_binary = _detect_chrome_binary()
    if chrome_binary:
        print(f"üîé Detected Chrome binary: {chrome_binary}")
        options.binary_location = chrome_binary
    else:
        print("‚ö†Ô∏è Chrome binary not found via known paths; relying on default.")

    # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô:
    # A) ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ Selenium Manager ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ path) ‚Äî ‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÉ‡∏ô Selenium 4.6+ ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
    # B) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ chromedriver ‡∏à‡∏≤‡∏Å env/‡∏£‡∏∞‡∏ö‡∏ö
    last_error = None

    # A) Selenium Manager (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà service.path)
    try:
        print("üîÑ Try A: Selenium Manager (auto driver)")
        driver = webdriver.Chrome(options=options)
        driver.get("about:blank")
        print("‚úÖ Selenium Manager pathless driver OK")
        return driver
    except Exception as e:
        print(f"‚ö†Ô∏è Selenium Manager failed: {e}")
        last_error = e

    # B) ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò chromedriver ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    try:
        print("üîÑ Try B: Use detected chromedriver path")
        chromedriver_path = _detect_chromedriver()
        if not chromedriver_path:
            raise RuntimeError("No chromedriver path found in env/PATH/candidates.")
        print(f"üîé Using chromedriver at: {chromedriver_path}")
        service = Service(chromedriver_path)
        driver = webdriver.Chrome(service=service, options=options)
        driver.get("about:blank")
        print("‚úÖ Explicit chromedriver OK")
        return driver
    except Exception as e:
        print(f"‚ùå All driver setups failed. Last: {e}")
        raise last_error or e

def login_to_system(driver):
    try:
        print("üîê Logging in...")
        driver.get("https://jobm.edoclite.com/jobManagement/pages/login")

        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )

        driver.find_element(By.NAME, "username").send_keys(USERNAME)
        driver.find_element(By.NAME, "password").send_keys(PASSWORD)

        # ‡∏õ‡∏∏‡πà‡∏° login ‡∏£‡∏∞‡∏ö‡∏∏ selector ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô (‡∏Å‡∏±‡∏ô DOM ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô <button type="submit"> ‡πÉ‡∏´‡πâ‡∏Å‡∏î submit ‡∏ú‡πà‡∏≤‡∏ô form ‡∏ï‡∏£‡∏á ‡πÜ
        driver.find_element(By.NAME, "password").submit()

        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//a[contains(., '‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà')]"))
        )
        print("‚úÖ Login successful")
        return True
    except Exception as e:
        print(f"‚ùå Login failed: {e}")
        return False

def fetch_new_jobs(driver):
    try:
        print("üì• Fetching new jobs...")
        driver.get("https://jobm.edoclite.com/jobManagement/pages/index?tab=13")

        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr"))
        )

        rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        data = []
        for row in rows:
            parsed = parse_row(row)
            if parsed:
                data.append(parsed)

        print(f"üìä Found {len(data)} new jobs")
        return data
    except Exception as e:
        print(f"‚ùå Error fetching new jobs: {e}")
        return []

def fetch_closed_jobs(driver):
    try:
        print("üì¶ Fetching closed jobs...")
        driver.get("https://jobm.edoclite.com/jobManagement/pages/index?tab=15")

        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr"))
        )

        rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        closed = set()
        for row in rows:
            try:
                cols = row.find_elements(By.TAG_NAME, "td")
                if len(cols) >= 2:
                    job_no = normalize_job_no(clean_html(cols[1]))
                    if job_no:
                        closed.add(job_no)
            except Exception as e:
                print(f"‚ö†Ô∏è Error parsing closed row: {e}")
                continue

        print(f"üìä Found {len(closed)} closed jobs")
        return closed
    except Exception as e:
        print(f"‚ùå Error fetching closed jobs: {e}")
        return set()

def setup_google_sheets():
    """Connect to Google Sheets using a Service Account (modern auth)."""
    import re, json, pathlib, os
    import gspread
    from google.oauth2.service_account import Credentials as GCreds
    from gspread.exceptions import APIError, SpreadsheetNotFound

    print("üìÑ Connecting to Google Sheets...")
    print(f"üîç Env has GOOGLE_SHEET_KEY? {bool(os.getenv('GOOGLE_SHEET_KEY'))}")
    print(f"üîç Env has GOOGLE_SHEET_URL? {bool(os.getenv('GOOGLE_SHEET_URL'))}")


    cred_path = pathlib.Path("credentials.json")
    if not cred_path.exists() or cred_path.stat().st_size == 0:
        raise RuntimeError("credentials.json missing or empty")

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    data = json.loads(cred_path.read_text(encoding="utf-8"))
    client_email = data.get("client_email")
    print(f"üîê Service Account: {client_email}")

    creds = GCreds.from_service_account_info(data, scopes=scopes)
    gc = gspread.authorize(creds)

    # ----- ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ target -----
    sheet_name = os.getenv("GOOGLE_SHEET_NAME", "‡∏ä‡∏µ‡∏ï1")
    # ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á key ‡∏ï‡∏£‡∏á ‡πÜ ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    key = os.getenv("GOOGLE_SHEET_KEY", "").strip()

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á key ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å URL (env ‚Üí ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
    url_env = os.getenv("GOOGLE_SHEET_URL", "").strip()
    url_fallback = GOOGLE_SHEET_URL  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    url = url_env or url_fallback

    if not key:
        # ‡∏î‡∏∂‡∏á key ‡∏î‡πâ‡∏ß‡∏¢ regex (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL)
        m = re.search(r"/spreadsheets/d/([a-zA-Z0-9-_]+)", url)
        if m:
            key = m.group(1)

    if not key:
        raise RuntimeError("Cannot parse spreadsheet key from GOOGLE_SHEET_URL. "
                           "Set GOOGLE_SHEET_KEY explicitly or pass a standard Sheets URL.")

    print(f"üîó Spreadsheet key: {key}")
    print(f"üìë Worksheet: {sheet_name}")

    try:
        sh = gc.open_by_key(key)
        ws = sh.worksheet(sheet_name)
        print("‚úÖ Connected to Google Sheets")
        return ws
    except SpreadsheetNotFound as e:
        print("‚ùå SpreadsheetNotFound:", e or "(no message)")
        raise RuntimeError(
            "Spreadsheet not found or no access.\n"
            f"- Share the sheet to: {client_email} (Editor)\n"
            "- Check the key/URL and ensure Sheets API + Drive API are enabled."
        )
    except APIError as e:
        print("‚ùå Google APIError:", repr(e))
        raise
    except Exception as e:
        print("‚ùå Error connecting to Google Sheets:", repr(e))
        raise




    def _load_json_str_maybe_base64(s: str) -> dict:
        """‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ï‡∏£‡∏á ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ base64-encoded JSON"""
        s = s.strip()
        # ‡∏•‡∏≠‡∏á parse ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ï‡∏£‡∏á ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
        try:
            return json.loads(s)
        except Exception:
            pass
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ï‡∏£‡∏á ‡πÜ ‡∏•‡∏≠‡∏á base64
        try:
            decoded = base64.b64decode(s).decode("utf-8")
            return json.loads(decoded)
        except Exception as e:
            raise RuntimeError(f"GOOGLE_SERVICE_ACCOUNT_JSON is neither JSON nor valid base64 JSON: {e}")

    try:
        if cred_path.exists() and cred_path.stat().st_size > 0:
            # ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
            data = json.loads(cred_path.read_text(encoding="utf-8"))
            creds_obj = ServiceAccountCredentials.from_json_keyfile_dict(data, scope)
            print("üîê Using credentials from credentials.json")
        else:
            # ‡∏à‡∏≤‡∏Å ENV (raw ‡∏´‡∏£‡∏∑‡∏≠ base64)
            env_val = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "").strip()
            if not env_val:
                raise RuntimeError(
                    "credentials.json not found and GOOGLE_SERVICE_ACCOUNT_JSON is empty."
                )
            data = _load_json_str_maybe_base64(env_val)
            creds_obj = ServiceAccountCredentials.from_json_keyfile_dict(data, scope)
            print("üîê Using credentials from GOOGLE_SERVICE_ACCOUNT_JSON (env)")
    except Exception as e:
        print(f"‚ùå Error loading credentials: {e}")
        raise

    # 3) Authorize ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï
    try:
        client = gspread.authorize(creds_obj)
        sheet = client.open_by_url(GOOGLE_SHEET_URL).worksheet(GOOGLE_SHEET_NAME)
        print("‚úÖ Connected to Google Sheets")
        return sheet
    except Exception as e:
        print(f"‚ùå Error connecting to Google Sheets: {e}")
        raise


def update_google_sheets(sheet, new_jobs, closed_job_nos,
                         waiting_jobs=None, closed_jobs_full=None,
                         closed_already_jobs=None,              # tab=16
                         internal_new_jobs=None,                # tab=18,7  -> ‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á
                         internal_closed_full=None,             # tab=11    -> ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
                         internal_closed_already=None):         # tab=20    -> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    """
    ‡πÄ‡∏î‡∏¥‡∏°:
    - tab=13 : ‡πÄ‡∏û‡∏¥‡πà‡∏° '‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô' (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô closed_job_nos); ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'
    - tab=14 : ‡πÄ‡∏û‡∏¥‡πà‡∏° '‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á'
    - tab=15 : ‡πÄ‡∏û‡∏¥‡πà‡∏° (C ‡∏ß‡πà‡∏≤‡∏á + shift ‡∏Ç‡∏ß‡∏≤) ‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'
    - tab=16 : ‡πÄ‡∏û‡∏¥‡πà‡∏° (C ‡∏ß‡πà‡∏≤‡∏á + shift ‡∏Ç‡∏ß‡∏≤) ‡πÄ‡∏õ‡πá‡∏ô '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß'; ‡∏î‡∏±‡∏Å‡∏™‡∏•‡∏±‡∏ö Job No/‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á

    ‡πÉ‡∏´‡∏°‡πà (‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå):
    - tab=18,7 : ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ -> ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á' ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö C,D = INTERNAL_CENTER
    - tab=11   : ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ -> ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'
    - tab=20   : ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ -> ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß'
    """
    waiting_jobs = waiting_jobs or []
    closed_jobs_full = closed_jobs_full or []
    closed_already_jobs = closed_already_jobs or []  # ‚¨ÖÔ∏è tab=16
    internal_new_jobs = internal_new_jobs or []
    internal_closed_full = internal_closed_full or []
    internal_closed_already = internal_closed_already or []

    try:
        print("‚úèÔ∏è Updating Google Sheets...")
        sheet_data = sheet.get_all_values()
        if not sheet_data:
            headers = ["Job No", "Column2", "Column3", "Column4", "Column5", "Column6", "Column7", "Status"]
            sheet.append_row(headers)
            sheet_data = [headers]

        # ‡∏ó‡∏≥‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï (‡πÉ‡∏ä‡πâ compare ‡πÅ‡∏ö‡∏ö normalize)
        existing = set()
        for row in sheet_data[1:]:
            if row and len(row) > 0:
                existing.add(normalize_job_no(row[0]))

        new_added = 0
        updated = 0

        # ====== tab=13 ======
        for job in new_jobs:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            status = "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô" if job_no in closed_job_nos else "‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á"

            if job_no not in existing:
                try:
                    sheet.append_row(job + [status], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab13): {job_no} -> {status}")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding job {job_no} from tab13: {e}")
            elif status == "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô":
                try:
                    for i, row in enumerate(sheet_data[1:], start=2):
                        if row and len(row) > 0 and normalize_job_no(row[0]) == job_no:
                            if len(row) < 8 or row[7] != "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô":
                                sheet.update_cell(i, 8, "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô")
                                print(f"üîí Updated status (tab13 closed): {job_no}")
                                updated += 1
                                time.sleep(0.5)
                            break
                except Exception as e:
                    print(f"‚ùå Error updating job {job_no} from tab13: {e}")

        # ====== tab=14 ======
        for job in waiting_jobs:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            if job_no not in existing:
                try:
                    sheet.append_row(job + ["‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab14): {job_no} -> ‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding job {job_no} from tab14: {e}")
                    
        # ====== tab=15 ======
        for job in closed_jobs_full:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            job_for_sheet = adjust_cols_for_sheet(job)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ tab=15

            if job_no not in existing:
                try:
                    print("DEBUG (tab15) ->", job_for_sheet + ["‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"])
                    sheet.append_row(job_for_sheet + ["‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab15): {job_no} -> ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding job {job_no} from tab15: {e}")
            else:
                try:
                    # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 8)
                    for i, row in enumerate(sheet_data[1:], start=2):
                        if row and len(row) > 0 and normalize_job_no(row[0]) == job_no:
                            current_status = row[7] if len(row) >= 8 else ""

                            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"
                            # ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô_‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á" ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ GAS ‡πÑ‡∏õ stamp ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
                            new_status = "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô_‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á" if current_status == "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚úÖ" else "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"

                            if len(row) < 8 or row[7] != new_status:
                                sheet.update_cell(i, 8, new_status)
                                print(f"üîí Updated status (tab15 exists): {job_no} -> {new_status}")
                                updated += 1
                                time.sleep(0.5)
                            break
                except Exception as e:
                    print(f"‚ùå Error updating existing job {job_no} from tab15: {e}")


        # ====== tab=16 (‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß) ======
        # ‡∏î‡∏±‡∏Å‡∏Å‡∏£‡∏ì‡∏µ Job No ‡∏Å‡∏±‡∏ö ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô -> ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        jobno_re = re.compile(r"No\d+-\d+")
        for job in closed_already_jobs:
            if not job or len(job) < 7:
                continue

            # ‡∏ñ‡πâ‡∏≤ job[0] ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Job No ‡πÅ‡∏ï‡πà job[1] ‡πÄ‡∏õ‡πá‡∏ô -> ‡∏™‡∏•‡∏±‡∏ö
            has0 = bool(jobno_re.search(job[0] or ""))
            has1 = bool(jobno_re.search(job[1] or ""))
            if (not has0) and has1:
                job[0], job[1] = job[1], job[0]

            job_no = normalize_job_no(job[0])

            # ‡πÉ‡∏ä‡πâ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô tab=15: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á + shift ‡∏Ç‡∏ß‡∏≤
            job_for_sheet = adjust_cols_for_sheet(job)

            if job_no not in existing:
                try:
                    print("DEBUG (tab16) ->", job_for_sheet + ["‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"])
                    sheet.append_row(job_for_sheet + ["‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab16): {job_no} -> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding job {job_no} from tab16: {e}")

            # ====== (‡πÉ‡∏´‡∏°‡πà) tab=18,7 ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå -> ‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á ======
        for job in internal_new_jobs:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            row_for_sheet = adjust_internal_centers(job)  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö C,D = INTERNAL_CENTER
            if job_no not in existing:
                try:
                    sheet.append_row(row_for_sheet + ["‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab18/7 internal): {job_no} -> ‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding internal-new {job_no}: {e}")

        # ====== (‡πÉ‡∏´‡∏°‡πà) tab=11 ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå -> ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô ======
        for job in internal_closed_full:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            row_for_sheet = adjust_internal_centers(job)
            if job_no not in existing:
                try:
                    sheet.append_row(row_for_sheet + ["‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab11 internal): {job_no} -> ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding internal-closed {job_no}: {e}")
            else:
                try:
                    for i, row in enumerate(sheet_data[1:], start=2):
                        if row and len(row) > 0 and normalize_job_no(row[0]) == job_no:
                            if len(row) < 8 or row[7] != "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô":
                                sheet.update_cell(i, 8, "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô")
                                print(f"üîí Updated status (tab11 internal): {job_no}")
                                updated += 1
                                time.sleep(0.5)
                            break
                except Exception as e:
                    print(f"‚ùå Error updating internal-closed {job_no}: {e}")

        # ====== (‡πÉ‡∏´‡∏°‡πà) tab=20 ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå) -> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ======
        for job in internal_closed_already:
            if not job or len(job) < 7:
                continue
            job_no = normalize_job_no(job[0])
            row_for_sheet = adjust_internal_centers(job)
            if job_no not in existing:
                try:
                    sheet.append_row(row_for_sheet + ["‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"], value_input_option="USER_ENTERED")
                    print(f"‚úÖ Added (tab20 internal): {job_no} -> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                    new_added += 1
                    existing.add(job_no)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ùå Error adding internal-closed-already {job_no}: {e}")


        print(f"üìä Summary: {new_added} new rows added, {updated} rows updated")
        return {"new_added": new_added, "updated": updated}
    except Exception as e:
        print(f"‚ùå Error updating Google Sheets: {e}")
        return {"new_added": 0, "updated": 0, "error": str(e)}

def main():
    print(f"üöÄ Starting job fetch process at {datetime.now()}")
    driver = None
    try:
        driver = setup_driver()
        if not login_to_system(driver):
            raise Exception("Login failed")
            
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• internal ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏ö‡∏ö‡∏•‡∏ô‡∏õ" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        def filter_internal_jobs(job_list):
            if not job_list:
                return None
            filtered = []
            for job in job_list:
                if job and len(job) > 0:
                    job_no = str(job[0]).strip() if job[0] else ""
                    if job_no.startswith("‡∏ö‡∏ö‡∏•‡∏ô‡∏õ"):
                        filtered.append(job)
            return filtered if filtered else None
        
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö regular jobs)
        def has_valid_data(job_list):
            if not job_list:
                return False
            for job in job_list:
                if job and any(str(cell).strip() for cell in job[:7]):
                    return True
            return False
        
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• internal ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏ö‡∏ö‡∏•‡∏ô‡∏õ" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        def filter_internal_jobs(job_list):
            if not job_list:
                return None
            filtered = []
            for job in job_list:
                if job and len(job) > 0:
                    job_no = str(job[0]).strip() if job[0] else ""
                    if job_no.startswith("‡∏ö‡∏ö‡∏•‡∏ô‡∏õ"):
                        filtered.append(job)
            return filtered if filtered else None
        
        # ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
        internal_new_18 = fetch_jobs_by_tab(driver, 18)
        internal_new_7 = fetch_jobs_by_tab(driver, 7)
        internal_new_combined = (internal_new_18 or []) + (internal_new_7 or [])
        internal_new_jobs = filter_internal_jobs(internal_new_combined)
        
        # ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
        internal_closed_full_raw = fetch_jobs_by_tab(driver, 11)
        internal_closed_full = filter_internal_jobs(internal_closed_full_raw)
        
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå)
        internal_closed_already_raw = fetch_jobs_by_tab(driver, 20)
        internal_closed_already = filter_internal_jobs(internal_closed_already_raw)
        
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (tab 16)
        closed_already_jobs_raw = fetch_jobs_by_tab(driver, 16)
        closed_already_jobs = closed_already_jobs_raw if has_valid_data(closed_already_jobs_raw) else None
        
        # ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        new_jobs = fetch_new_jobs(driver)            # tab=13 (‡πÄ‡∏î‡∏¥‡∏°)
        closed_job_nos = fetch_closed_jobs(driver)   # tab=15 (set of job_no for update status)
        
        # ‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å tab=14 ‡πÅ‡∏•‡∏∞ tab=15 (‡πÄ‡∏û‡∏∑‡πà‡∏≠ '‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏ñ‡∏ß' ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ)
        waiting_jobs_raw = fetch_jobs_by_tab(driver, 14)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á'
        waiting_jobs = waiting_jobs_raw if has_valid_data(waiting_jobs_raw) else None
        
        closed_jobs_full_raw = fetch_jobs_by_tab(driver, 15)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'
        closed_jobs_full = closed_jobs_full_raw if has_valid_data(closed_jobs_full_raw) else None
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"üìä Data summary:")
        print(f"   - New jobs (tab13): {len(new_jobs) if new_jobs else 0}")
        print(f"   - Waiting jobs (tab14): {len(waiting_jobs) if waiting_jobs else 0}")
        print(f"   - Closed jobs full (tab15): {len(closed_jobs_full) if closed_jobs_full else 0}")
        print(f"   - Closed already jobs (tab16): {len(closed_already_jobs) if closed_already_jobs else 0}")
        print(f"   - Internal new jobs (tab18,7): {len(internal_new_jobs) if internal_new_jobs else 0}")
        print(f"   - Internal closed full (tab11): {len(internal_closed_full) if internal_closed_full else 0}")
        print(f"   - Internal closed already (tab20): {len(internal_closed_already) if internal_closed_already else 0}")
        
        sheet = setup_google_sheets()
        result = update_google_sheets(
            sheet,
            new_jobs=new_jobs,
            closed_job_nos=closed_job_nos,
            waiting_jobs=waiting_jobs,
            closed_jobs_full=closed_jobs_full,
            closed_already_jobs=closed_already_jobs,  # ‡πÄ‡∏û‡∏¥‡πà‡∏° tab16
            internal_new_jobs=internal_new_jobs,
            internal_closed_full=internal_closed_full,
            internal_closed_already=internal_closed_already,
        )
        print("‚úÖ Process completed successfully!")
        print(f"üìä Results: {result}")
    except Exception as e:
        print(f"‚ùå Process failed: {e}")
        exit(1)
    finally:
        if driver:
            try:
                driver.quit()
                print("üîß WebDriver closed")
            except Exception as e:
                print(f"‚ö†Ô∏è Error closing driver: {e}")


if __name__ == "__main__":
    main()
