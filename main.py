import sys
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import json
import os
from google.auth import default
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException
from webdriver_manager.chrome import ChromeDriverManager
import requests
from io import StringIO
import time
from datetime import datetime

# --- Configuration ---
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1uEbsT3PZ8tdwiU1Xga_hS6uPve2H74xD5wUci0EcT0Q/edit?gid=0#gid=0"
GOOGLE_SHEET_NAME = "‡∏ä‡∏µ‡∏ï1"
TELEGRAM_BOT_TOKEN = "7978005713:AAHoMsNl_cyT3SkKLDq139YuTzGAnStfl4"
TELEGRAM_CHAT_ID = "8028926248"

# ‚úÖ Sequential Tab Processing Logic
PROCESSING_ORDER = [
    {
        'tab': 13,
        'name': '‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô',
        'action': 'ADD_NEW',  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        'status': '‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
    },
    {
        'tab': 14,
        'name': '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô',
        'action': 'ADD_NEW',  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        'status': '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
    },
    {
        'tab': 15,
        'name': '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô',
        'action': 'UPDATE_STATUS',  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"
        'status': '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'
    }
]

def test_google_sheet_authentication():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    """
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Sheet Authentication...")
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ environment variable ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'):
            print("‚ùå GOOGLE_APPLICATION_CREDENTIALS environment variable ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            return False
            
        creds_file = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
        print(f"‚úÖ ‡∏û‡∏ö credentials file: {creds_file}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not os.path.exists(creds_file):
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå credentials ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {creds_file}")
            return False
            
        print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå credentials ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON structure
        try:
            with open(creds_file, 'r') as f:
                creds_data = json.load(f)
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
            required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id']
            missing_fields = [field for field in required_fields if field not in creds_data]
            
            if missing_fields:
                print(f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô JSON: {missing_fields}")
                return False
                
            print("‚úÖ JSON structure ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            print(f"üìß Service Account Email: {creds_data['client_email']}")
            print(f"üÜî Project ID: {creds_data['project_id']}")
            print(f"üîë Private Key ID: {creds_data['private_key_id'][:10]}...")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
            return False
        except Exception as e:
            print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå credentials ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            return False
            
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á credentials
        try:
            credentials = Credentials.from_service_account_file(creds_file)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á credentials ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á credentials ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            return False
            
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ gspread
        try:
            client = gspread.authorize(credentials)
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ gspread ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ gspread ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Sheets API ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            return False
            
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á spreadsheet (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ SHEET_ID)
        sheet_id = os.environ.get('GOOGLE_SHEET_ID', 'YOUR_SHEET_ID_HERE')  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        if sheet_id and sheet_id != 'YOUR_SHEET_ID_HERE':
            try:
                spreadsheet = client.open_by_key(sheet_id)
                print(f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á spreadsheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {spreadsheet.title}")
                
                # ‡∏•‡∏≠‡∏á‡∏î‡∏π worksheets
                worksheets = spreadsheet.worksheets()
                print(f"üìä ‡∏û‡∏ö {len(worksheets)} worksheets:")
                for ws in worksheets:
                    print(f"   - {ws.title} ({ws.row_count}x{ws.col_count})")
                    
            except gspread.SpreadsheetNotFound:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö spreadsheet ID: {sheet_id}")
                print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ spreadsheet ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ service account ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                return False
            except gspread.APIError as e:
                print(f"‚ùå Google Sheets API Error: {e}")
                return False
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á spreadsheet ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
                return False
                
        print("üéâ Google Sheet Authentication ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: {e}")
        return False

def get_existing_data_from_sheet():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Google Sheet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    """
    print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Google Sheet...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö authentication ‡∏Å‡πà‡∏≠‡∏ô
        if not test_google_sheet_authentication():
            print("‚ùå Google Sheet Authentication ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return set()
            
        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        credentials = Credentials.from_service_account_file(
            os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
        )
        client = gspread.authorize(credentials)
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Sheet ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        sheet_id = os.environ.get('GOOGLE_SHEET_ID', 'YOUR_SHEET_ID_HERE')
        if sheet_id == 'YOUR_SHEET_ID_HERE':
            print("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOOGLE_SHEET_ID environment variable")
            return set()
            
        spreadsheet = client.open_by_key(sheet_id)
        worksheet = spreadsheet.sheet1  # ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ worksheet
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        records = worksheet.get_all_records()
        existing_job_nos = set()
        
        for record in records:
            if 'Job No.' in record and record['Job No.']:
                existing_job_nos.add(record['Job No.'].strip())
                
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(existing_job_nos)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return existing_job_nos
        
    except gspread.SpreadsheetNotFound:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö spreadsheet - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheet ID ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå")
        return set()
    except gspread.APIError as e:
        print(f"‚ùå Google Sheets API Error: {e}")
        if 'INVALID_ARGUMENT' in str(e):
            print("üí° ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ encoding - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö base64 encoding")
        return set()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet: {e}")
        return set()

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á main() function
def main():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° JobM Monitor")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Sheet Authentication ‡∏Å‡πà‡∏≠‡∏ô
    print("\n" + "="*50)
    print("üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Sheet Authentication")
    print("="*50)
    
    auth_success = test_google_sheet_authentication()
    
    print("\n" + "="*50)
    print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JobM")  
    print("="*50)
    
    if not auth_success:
        print("‚ö†Ô∏è Google Sheet Authentication ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠ÿ®:")
        print("   1. base64 encoding ‡∏Ç‡∏≠‡∏á service account JSON")
        print("   2. Google Sheets API ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("   3. Google Sheet ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ service account ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

        
def send_telegram_message(message):
    """Sends a message to the specified Telegram chat."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_BOT_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TELEGRAM_CHAT_ID")
        return False

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram: {e}")
        return False

def init_webdriver():
    """Initialize Chrome WebDriver with proper configuration"""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        print("‚úÖ WebDriver ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        return driver
    except WebDriverException as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebDriver: {e}")
        sys.exit(1)

def login_to_jobm(driver, username, password, login_url):
    """Login to JobM system"""
    print("üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Login...")
    try:
        driver.get(login_url)
        print(f"üìÑ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login: {driver.current_url}")

        username_field = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.NAME, "username")) 
        )
        password_field = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.NAME, "password"))
        )
        login_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )

        username_field.clear()
        username_field.send_keys(username)
        password_field.clear()
        password_field.send_keys(password)
        
        print("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Login...")
        login_button.click()

        WebDriverWait(driver, 20).until(
            EC.url_contains("jobManagement/pages/index")
        )
        print("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True
    except (NoSuchElementException, TimeoutException) as e:
        print(f"‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        driver.save_screenshot("login_failure.png")
        return False
    except Exception as e:
        print(f"‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        driver.save_screenshot("login_failure.png")
        return False

def fetch_data_from_tab(driver, base_url, tab_config):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tab ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    tab_number = tab_config['tab']
    tab_name = tab_config['name']
    data_url = f"{base_url}?tab={tab_number}"
    
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {tab_name} (tab={tab_number})")
    print(f"üåê URL: {data_url}")
    
    try:
        driver.get(data_url)
        time.sleep(3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CLASS_NAME, "table-bordered"))
        )
        print(f"‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

        page_source = driver.page_source
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å HTML table
        tables = pd.read_html(StringIO(page_source), attrs={'class': 'table table-bordered table-striped'})
        
        if tables:
            df = tables[0]
            df.columns = df.columns.str.strip()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata
            df['Source_Tab'] = tab_number
            df['Source_Tab_Name'] = tab_name
            df['Status'] = tab_config['status']
            df['Last_Updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(df)} ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å {tab_name}")
            print(f"üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {list(df.columns)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if len(df) > 0 and 'Job No.' in df.columns:
                job_numbers = df['Job No.'].dropna().astype(str).str.strip().tolist()
                print(f"üè∑Ô∏è Job No. ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {job_numbers[:5]}{'...' if len(job_numbers) > 5 else ''}")
            
            return df
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô {tab_name}")
            return pd.DataFrame()
            
    except TimeoutException:
        print(f"‚è∞ Timeout: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô {tab_name}")
        driver.save_screenshot(f"tab_{tab_number}_timeout.png")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {tab_name}: {e}")
        driver.save_screenshot(f"tab_{tab_number}_failure.png")
        return pd.DataFrame()

def get_all_sheet_data(spreadsheet_url, sheet_name):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheet"""
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds, project = default(scopes=scope)
        
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(spreadsheet_url)
        worksheet = spreadsheet.worksheet(sheet_name)
        
        all_values = worksheet.get_all_values()
        if not all_values:
            print("üìä Google Sheet ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
            return pd.DataFrame()

        headers = all_values[0]
        data = all_values[1:]
        df = pd.DataFrame(data, columns=headers)
        df.columns = df.columns.str.strip()
        print(f"üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet '{sheet_name}': {len(df)} ‡πÅ‡∏ñ‡∏ß")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Spreadsheet ‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ")
        return pd.DataFrame()
    except gspread.exceptions.WorksheetNotFound:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ä‡∏∑‡πà‡∏≠ '{sheet_name}'")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet: {e}")
        return pd.DataFrame()

def append_rows_to_google_sheet(rows_to_append_df, spreadsheet_url, sheet_name):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô Google Sheet"""
    if rows_to_append_df.empty:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Google Sheet")
        return False

    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds, project = default(scopes=scope)

        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(spreadsheet_url)
        worksheet = spreadsheet.worksheet(sheet_name)
        
        data_to_append = rows_to_append_df.values.tolist()
        worksheet.append_rows(data_to_append)
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {len(rows_to_append_df)} ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet: {e}")
        return False

def update_job_status_in_sheet(job_no, new_status, spreadsheet_url, sheet_name):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Job No. ‡πÉ‡∏ô Google Sheet"""
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds, project = default(scopes=scope)

        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(spreadsheet_url)
        worksheet = spreadsheet.worksheet(sheet_name)
        
        # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Job No. ‡∏ô‡∏µ‡πâ
        all_values = worksheet.get_all_values()
        if not all_values:
            return False
        
        headers = all_values[0]
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        job_no_col = None
        status_col = None
        last_updated_col = None
        
        for i, header in enumerate(headers):
            if 'Job No.' in header:
                job_no_col = i + 1  # gspread ‡πÉ‡∏ä‡πâ 1-based indexing
            elif 'Status' in header:
                status_col = i + 1
            elif 'Last_Updated' in header:
                last_updated_col = i + 1
        
        if job_no_col is None:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Job No.' ‡πÉ‡∏ô Sheet")
            return False
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Job No.
        for row_idx, row in enumerate(all_values[1:], start=2):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2
            if row_idx - 2 < len(row) and str(row[job_no_col - 1]).strip() == str(job_no).strip():
                # ‡∏û‡∏ö Job No. ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if status_col:
                    worksheet.update_cell(row_idx, status_col, new_status)
                if last_updated_col:
                    worksheet.update_cell(row_idx, last_updated_col, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                
                print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Job No. {job_no} ‡πÄ‡∏õ‡πá‡∏ô '{new_status}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
        
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Job No. {job_no} ‡πÉ‡∏ô Google Sheet")
        return False
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
        return False

def process_tab_data(tab_data, tab_config, existing_job_numbers):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tab ‡∏ï‡∏≤‡∏° logic ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    if tab_data.empty:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {tab_config['name']}")
        return [], []
    
    tab_name = tab_config['name']
    action = tab_config['action']
    status = tab_config['status']
    
    new_jobs = []
    updated_jobs = []
    
    print(f"\nüîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {tab_name} ({action})...")
    
    for index, row in tab_data.iterrows():
        if 'Job No.' not in row.index or pd.isna(row['Job No.']):
            continue
            
        job_no = str(row['Job No.']).strip()
        if not job_no:
            continue
        
        if action == 'ADD_NEW':
            # Tab 13 & 14: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
            if job_no not in existing_job_numbers:
                new_jobs.append(row)
                print(f"üÜï {tab_name}: ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà {job_no}")
                
        elif action == 'UPDATE_STATUS':
            # Tab 15: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
            if job_no in existing_job_numbers:
                # ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                updated_jobs.append({'job_no': job_no, 'new_status': status})
                print(f"üîÑ {tab_name}: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {job_no} ‡πÄ‡∏õ‡πá‡∏ô '{status}'")
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                new_jobs.append(row)
                print(f"üÜï {tab_name}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà {job_no} (‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô)")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô existing_job_numbers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                existing_job_numbers.add(job_no)
    
    return new_jobs, updated_jobs 

def generate_summary_report(results):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    total_new = sum(len(result['new_jobs']) for result in results.values())
    total_updated = sum(len(result['updated_jobs']) for result in results.values())
    
    report = [
        f"üìä <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</b>",
        f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"",
        f"üîç <b>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Tab:</b>"
    ]
    
    for tab_config in PROCESSING_ORDER:
        tab_num = tab_config['tab']
        tab_name = tab_config['name']
        
        if tab_num in results:
            new_count = len(results[tab_num]['new_jobs'])
            updated_count = len(results[tab_num]['updated_jobs'])
            
            if tab_config['action'] == 'ADD_NEW':
                report.append(f"‚Ä¢ Tab {tab_num} ({tab_name}): ‚ûï {new_count} ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
            else:
                report.append(f"‚Ä¢ Tab {tab_num} ({tab_name}): üîÑ {updated_count} ‡∏á‡∏≤‡∏ô‡∏õ‡∏¥‡∏î")
        else:
            report.append(f"‚Ä¢ Tab {tab_num} ({tab_name}): ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    
    report.extend([
        f"",
        f"üìà <b>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°:</b>",
        f"üÜï ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_new} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        f"‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î: {total_updated} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    ])
    
    return "\n".join(report)

# --- Main Logic ---
if __name__ == "__main__":
    USERNAME = "01000566"
    PASSWORD = "01000566"
    LOGIN_URL = "https://jobm.edoclite.com/jobManagement/pages/login"
    BASE_INDEX_URL = "https://jobm.edoclite.com/jobManagement/pages/index"

    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° JobM Monitor")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìã Tab ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {[config['tab'] for config in PROCESSING_ORDER]}")
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Actions - ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ö
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local/Railway - ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö loop
    is_github_actions = 'GITHUB_ACTIONS' in os.environ
    
    if is_github_actions:
        print("üêô ‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô GitHub Actions - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        loop_count = 1
    else:
        print("üîÑ ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Local - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö loop")
        loop_count = float('inf')  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
    
    current_loop = 0
    while current_loop < loop_count:
        driver = None
        processing_results = {}
        
        try:
            print(f"\n{'='*60}")
            print(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"{'='*60}")
            
            # 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebDriver
            driver = init_webdriver()
            
            # 2. Login
            if not login_to_jobm(driver, USERNAME, PASSWORD, LOGIN_URL):
                print("‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
                send_telegram_message("‚ùå JobM Monitor: Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                continue
            
            # 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Google Sheet
            print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Google Sheet...")
            existing_data = get_all_sheet_data(GOOGLE_SHEET_URL, GOOGLE_SHEET_NAME)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á set ‡∏Ç‡∏≠‡∏á Job No. ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            existing_job_numbers = set()
            if not existing_data.empty and 'Job No.' in existing_data.columns:
                existing_job_numbers = set(existing_data['Job No.'].astype(str).str.strip().tolist())
            print(f"üìã Job No. ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {len(existing_job_numbers)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # 4. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
            for tab_config in PROCESSING_ORDER:
                print(f"\n{'‚îÄ'*40}")
                print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Tab {tab_config['tab']}: {tab_config['name']}")
                print(f"{'‚îÄ'*40}")
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tab
                tab_data = fetch_data_from_tab(driver, BASE_INDEX_URL, tab_config)
                
                if not tab_data.empty:
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏° logic
                    new_jobs, updated_jobs = process_tab_data(tab_data, tab_config, existing_job_numbers)
                    
                processing_results[tab_config['tab']] = {
                    'new_jobs': new_jobs,
                    'updated_jobs': updated_jobs,
                    'tab_config': tab_config
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Google Sheet (‡∏ó‡∏±‡πâ‡∏á ADD_NEW ‡πÅ‡∏•‡∏∞ UPDATE_STATUS ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö)
                if new_jobs:
                    new_jobs_df = pd.DataFrame(new_jobs)
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Sheet ‡πÄ‡∏î‡∏¥‡∏°
                    if not existing_data.empty:
                        try:
                            new_jobs_ordered = new_jobs_df.reindex(columns=existing_data.columns, fill_value='')
                            append_rows_to_google_sheet(new_jobs_ordered, GOOGLE_SHEET_URL, GOOGLE_SHEET_NAME)
                        except Exception as e:
                            print(f"‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {e}")
                            append_rows_to_google_sheet(new_jobs_df, GOOGLE_SHEET_URL, GOOGLE_SHEET_NAME)
                    else:
                        # ‡∏ñ‡πâ‡∏≤ Sheet ‡∏ß‡πà‡∏≤‡∏á
                        header_df = pd.DataFrame([new_jobs_df.columns.tolist()])
                        combined_df = pd.concat([header_df, new_jobs_df], ignore_index=True)
                        append_rows_to_google_sheet(combined_df, GOOGLE_SHEET_URL, GOOGLE_SHEET_NAME)
                    
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï existing_job_numbers
                    for job in new_jobs:
                        if 'Job No.' in job.index and pd.notna(job['Job No.']):
                            existing_job_numbers.add(str(job['Job No.']).strip())
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î
                if updated_jobs:
                    for update_info in updated_jobs:
                        update_job_status_in_sheet(
                            update_info['job_no'], 
                            update_info['new_status'],
                            GOOGLE_SHEET_URL, 
                            GOOGLE_SHEET_NAME
                        )
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Tab {tab_config['tab']} ‡πÑ‡∏î‡πâ")
                    processing_results[tab_config['tab']] = {
                        'new_jobs': [],
                        'updated_jobs': [],
                        'tab_config': tab_config,
                        'error': True
                    }
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á tab
                time.sleep(3)
            
            # 5. ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
            summary_report = generate_summary_report(processing_results)
            print(f"\n{summary_report}")
            send_telegram_message(summary_report)
            
            print(f"\n‚úÖ ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            break
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {e}")
            error_message = f"üö® JobM Monitor Error: {str(e)[:200]}..."
            send_telegram_message(error_message)
        finally:
            if driver:
                print("üîå ‡∏õ‡∏¥‡∏î WebDriver")
                driver.quit()
        
        current_loop += 1
        
        # 6. ‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ local run)
        if not is_github_actions and current_loop < loop_count:
            print(f"\n‚è∞ ‡∏û‡∏±‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
            print(f"‚è∞ ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.fromtimestamp(time.time() + 3600).strftime('%Y-%m-%d %H:%M:%S')}")
            time.sleep(3600)
    
    if is_github_actions:
        print(f"‚úÖ GitHub Actions job ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏£‡∏≠ schedule ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
    else:
        print(f"üîö ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

 


