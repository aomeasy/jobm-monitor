#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JobM Monitor Testing Script
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á
"""

import sys
import os
import pandas as pd
import gspread
import requests
from google.auth import default
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from webdriver_manager.chrome import ChromeDriverManager
from io import StringIO
import time
from datetime import datetime
import json

# --- Configuration ---
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/176UvX_WAHQvWtbqIdvZu4Wo91U_6YG3GuBSFjt8IDYk/edit#gid=687082847"
GOOGLE_SHEET_NAME = "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

# Test Configuration
TEST_TABS = [13, 14, 15]
TAB_NAMES = {
    13: "‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô",
    14: "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô", 
    15: "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô"
}

USERNAME = "01000566"
PASSWORD = "01000566"
LOGIN_URL = "https://jobm.edoclite.com/jobManagement/pages/login"
BASE_INDEX_URL = "https://jobm.edoclite.com/jobManagement/pages/index"

class TestResult:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    def __init__(self, name):
        self.name = name
        self.success = False
        self.details = {}
        self.error = None
        self.start_time = time.time()
        self.end_time = None
    
    def set_success(self, details=None):
        self.success = True
        self.details = details or {}
        self.end_time = time.time()
    
    def set_failure(self, error):
        self.success = False
        self.error = str(error)
        self.end_time = time.time()
    
    @property
    def duration(self):
        if self.end_time:
            return round(self.end_time - self.start_time, 2)
        return 0

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("=" * 70)
    print("üß™ JobM Monitor System Testing")
    print("=" * 70)
    print(f"‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç Environment: {'GitHub Actions' if 'GITHUB_ACTIONS' in os.environ else 'Local'}")
    print("-" * 70)

def send_telegram_message(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return False, "Token or Chat ID not configured"

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        return True, "Success"
    except Exception as e:
        return False, str(e)

def test_environment():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Environment ‡πÅ‡∏•‡∏∞ Dependencies"""
    result = TestResult("Environment Check")
    
    try:
        print("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Environment...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required packages
        required_packages = ['pandas', 'gspread', 'selenium', 'requests']
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package)
            except ImportError:
                missing_packages.append(package)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
        env_vars = {
            'TELEGRAM_BOT_TOKEN': bool(TELEGRAM_BOT_TOKEN),
            'TELEGRAM_CHAT_ID': bool(TELEGRAM_CHAT_ID),
            'GOOGLE_APPLICATION_CREDENTIALS': bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS')),
            'GITHUB_ACTIONS': bool(os.getenv('GITHUB_ACTIONS'))
        }
        
        details = {
            'python_version': python_version,
            'missing_packages': missing_packages,
            'environment_variables': env_vars
        }
        
        if missing_packages:
            result.set_failure(f"Missing packages: {missing_packages}")
        else:
            result.set_success(details)
            print(f"   ‚úÖ Python {python_version}")
            print(f"   ‚úÖ All packages installed")
            print(f"   ‚úÖ Environment variables: {sum(env_vars.values())}/4 configured")
        
    except Exception as e:
        result.set_failure(e)
        print(f"   ‚ùå Environment check failed: {e}")
    
    return result

def test_webdriver():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebDriver"""
    result = TestResult("WebDriver")
    driver = None
    
    try:
        print("üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebDriver...")
        
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        driver.get("https://www.google.com")
        
        result.set_success({
            'chrome_version': driver.capabilities.get('browserVersion', 'Unknown'),
            'chromedriver_version': driver.capabilities.get('chrome', {}).get('chromedriverVersion', 'Unknown')
        })
        print(f"   ‚úÖ Chrome: {driver.capabilities.get('browserVersion', 'Unknown')}")
        print(f"   ‚úÖ ChromeDriver: {driver.capabilities.get('chrome', {}).get('chromedriverVersion', 'Unknown')}")
        
    except Exception as e:
        result.set_failure(e)
        print(f"   ‚ùå WebDriver failed: {e}")
    finally:
        if driver:
            driver.quit()
    
    return result

def test_login(driver=None):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login"""
    result = TestResult("Login")
    should_close_driver = False
    
    if driver is None:
        should_close_driver = True
        try:
            options = webdriver.ChromeOptions()
            options.add_argument("--headless")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
        except Exception as e:
            result.set_failure(f"Cannot create WebDriver: {e}")
            return result
    
    try:
        print("üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login...")
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ login
        driver.get(LOGIN_URL)
        
        # ‡∏£‡∏≠ elements ‡πÇ‡∏´‡∏•‡∏î
        username_field = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.NAME, "username"))
        )
        password_field = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.NAME, "password"))
        )
        login_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
        )

        # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ login
        username_field.clear()
        username_field.send_keys(USERNAME)
        password_field.clear()
        password_field.send_keys(PASSWORD)
        login_button.click()

        # ‡∏£‡∏≠ redirect
        WebDriverWait(driver, 20).until(
            EC.url_contains("jobManagement/pages/index")
        )
        
        current_url = driver.current_url
        result.set_success({
            'login_url': LOGIN_URL,
            'redirect_url': current_url,
            'username': USERNAME
        })
        print(f"   ‚úÖ Login successful")
        print(f"   ‚úÖ Redirected to: {current_url}")
        
    except TimeoutException:
        result.set_failure("Login timeout - elements not found or redirect failed")
        print(f"   ‚ùå Login timeout")
    except Exception as e:
        result.set_failure(e)
        print(f"   ‚ùå Login failed: {e}")
    finally:
        if should_close_driver and driver:
            driver.quit()
    
    return result

def test_tab_data_extraction():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab"""
    results = {}
    driver = None
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á WebDriver
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        # Login ‡∏Å‡πà‡∏≠‡∏ô
        login_result = test_login(driver)
        if not login_result.success:
            for tab_num in TEST_TABS:
                results[f"tab_{tab_num}"] = TestResult(f"Tab {tab_num}")
                results[f"tab_{tab_num}"].set_failure("Cannot login")
            return results
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab
        for tab_number in TEST_TABS:
            result = TestResult(f"Tab {tab_number}")
            tab_name = TAB_NAMES.get(tab_number, f"Tab_{tab_number}")
            
            try:
                print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {tab_name} (tab={tab_number})...")
                
                data_url = f"{BASE_INDEX_URL}?tab={tab_number}"
                driver.get(data_url)
                time.sleep(3)
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
                WebDriverWait(driver, 30).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "table-bordered"))
                )
                
                page_source = driver.page_source
                tables = pd.read_html(StringIO(page_source), 
                                   attrs={'class': 'table table-bordered table-striped'})
                
                if tables:
                    df = tables[0]
                    df.columns = df.columns.str.strip()
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                    required_columns = ['Job No.']
                    missing_columns = [col for col in required_columns if col not in df.columns]
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                    sample_data = {}
                    if len(df) > 0:
                        for col in df.columns[:5]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
                            if len(df[col].dropna()) > 0:
                                sample_data[col] = str(df[col].dropna().iloc[0])[:50]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    
                    details = {
                        'row_count': len(df),
                        'column_count': len(df.columns),
                        'columns': list(df.columns),
                        'missing_columns': missing_columns,
                        'sample_data': sample_data,
                        'url': data_url
                    }
                    
                    if missing_columns:
                        result.set_failure(f"Missing required columns: {missing_columns}")
                        print(f"   ‚ö†Ô∏è Missing columns: {missing_columns}")
                    else:
                        result.set_success(details)
                        print(f"   ‚úÖ Data found: {len(df)} rows, {len(df.columns)} columns")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á Job No. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        if 'Job No.' in df.columns and len(df) > 0:
                            job_numbers = df['Job No.'].dropna().astype(str).head(3).tolist()
                            print(f"   üìã Sample Job No.: {job_numbers}")
                else:
                    result.set_failure("No table found")
                    print(f"   ‚ùå No table found")
                    
            except TimeoutException:
                result.set_failure("Timeout waiting for table")
                print(f"   ‚è∞ Timeout waiting for table")
            except Exception as e:
                result.set_failure(str(e))
                print(f"   ‚ùå Error: {e}")
            
            results[f"tab_{tab_number}"] = result
            time.sleep(2)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á tab
            
    except Exception as e:
        print(f"‚ùå Critical error in tab testing: {e}")
        for tab_num in TEST_TABS:
            if f"tab_{tab_num}" not in results:
                result = TestResult(f"Tab {tab_num}")
                result.set_failure(f"Critical error: {e}")
                results[f"tab_{tab_num}"] = result
    finally:
        if driver:
            driver.quit()
    
    return results

def test_google_sheet_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet"""
    result = TestResult("Google Sheets")
    
    try:
        print("üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet...")
        
        scope = ["https://spreadsheets.google.com/feeds", 
                "https://www.googleapis.com/auth/drive"]
        creds, project = default(scopes=scope)
        
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_url(GOOGLE_SHEET_URL)
        worksheet = spreadsheet.worksheet(GOOGLE_SHEET_NAME)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        all_values = worksheet.get_all_values()
        row_count = len(all_values)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        test_row = [f"TEST_{datetime.now().strftime('%Y%m%d_%H%M%S')}", "Test Data"]
        worksheet.append_row(test_row)
        
        # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        all_values_after = worksheet.get_all_values()
        if len(all_values_after) > row_count:
            worksheet.delete_rows(len(all_values_after))
        
        details = {
            'spreadsheet_title': spreadsheet.title,
            'worksheet_title': worksheet.title,
            'row_count': row_count,
            'column_count': len(all_values[0]) if all_values else 0,
            'spreadsheet_id': spreadsheet.id,
            'project_id': project
        }
        
        result.set_success(details)
        print(f"   ‚úÖ Connected to: {spreadsheet.title}")
        print(f"   ‚úÖ Worksheet: {worksheet.title}")
        print(f"   ‚úÖ Data: {row_count} rows")
        print(f"   ‚úÖ Read/Write test: Passed")
        
    except Exception as e:
        result.set_failure(e)
        print(f"   ‚ùå Google Sheets error: {e}")
    
    return result

def test_telegram_notification():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram"""
    result = TestResult("Telegram")
    
    try:
        print("üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram...")
        
        if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
            result.set_failure("Telegram credentials not configured")
            print(f"   ‚ùå Token or Chat ID not configured")
            return result
        
        test_message = (
            f"üß™ <b>JobM Monitor Test</b>\n"
            f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n"
            f"‚úÖ ‡∏´‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Telegram ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
        )
        
        success, message = send_telegram_message(test_message)
        
        if success:
            result.set_success({
                'bot_token_length': len(TELEGRAM_BOT_TOKEN),
                'chat_id': TELEGRAM_CHAT_ID,
                'message_sent': True
            })
            print(f"   ‚úÖ Message sent successfully")
            print(f"   ‚úÖ Chat ID: {TELEGRAM_CHAT_ID}")
        else:
            result.set_failure(f"Failed to send message: {message}")
            print(f"   ‚ùå Failed to send: {message}")
        
    except Exception as e:
        result.set_failure(e)
        print(f"   ‚ùå Telegram error: {e}")
    
    return result

def generate_test_report(test_results):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results.values() if result.success)
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    report = {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'overall_status': 'PASS' if failed_tests == 0 else 'FAIL',
        'summary': {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'failed_tests': failed_tests,
            'success_rate': f"{success_rate:.1f}%"
        },
        'tests': {},
        'total_duration': sum(result.duration for result in test_results.values())
    }
    
    for name, result in test_results.items():
        report['tests'][name] = {
            'success': result.success,
            'duration': result.duration,
            'details': result.details,
            'error': result.error
        }
    
    return report

def print_test_report(report):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("\n" + "=" * 70)
    print("üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö JobM Monitor")
    print("=" * 70)
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {report['timestamp']}")
    print(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°: {'‚úÖ PASS' if report['overall_status'] == 'PASS' else '‚ùå FAIL'}")
    print(f"üìà ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ: {report['summary']['passed_tests']}/{report['summary']['total_tests']} ({report['summary']['success_rate']})")
    print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {report['total_duration']:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡πÄ")
    
    print(f"\nüîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("-" * 70)
    
    for test_name, test_result in report['tests'].items():
        status_icon = "‚úÖ" if test_result['success'] else "‚ùå"
        print(f"{status_icon} {test_name} ({test_result['duration']:.2f}s)")
        
        if test_result['success'] and test_result['details']:
            details = test_result['details']
            if 'row_count' in details:
                print(f"   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {details['row_count']}")
            if 'column_count' in details:
                print(f"   üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {details['column_count']}")
            if 'missing_columns' in details and details['missing_columns']:
                print(f"   ‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î: {details['missing_columns']}")
        
        if not test_result['success'] and test_result['error']:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {test_result['error']}")
        
        print()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print_header()
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    test_results = {}
    
    # 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Environment
    test_results['environment'] = test_environment()
    
    # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebDriver
    test_results['webdriver'] = test_webdriver()
    
    # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Sheets
    test_results['google_sheets'] = test_google_sheet_connection()
    
    # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Telegram
    test_results['telegram'] = test_telegram_notification()
    
    # 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tabs (‡∏ñ‡πâ‡∏≤ WebDriver ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    if test_results['webdriver'].success:
        tab_results = test_tab_data_extraction()
        test_results.update(tab_results)
    else:
        print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° tab testing ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å WebDriver ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        for tab_num in TEST_TABS:
            result = TestResult(f"Tab {tab_num}")
            result.set_failure("WebDriver not available")
            test_results[f"tab_{tab_num}"] = result
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    report = generate_test_report(test_results)
    print_test_report(report)
    
    # ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram (‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    if test_results['telegram'].success:
        summary_message = (
            f"üß™ <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö JobM Monitor</b>\n"
            f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {report['timestamp']}\n"
            f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‚úÖ PASS' if report['overall_status'] == 'PASS' else '‚ùå FAIL'}\n"
            f"üìà ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ: {report['summary']['passed_tests']}/{report['summary']['total_tests']} "
            f"({report['summary']['success_rate']})\n"
            f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {report['total_duration']:.2f}s\n\n"
            f"üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n"
        )
        
        for test_name, test_result in test_results.items():
            status_icon = "‚úÖ" if test_result.success else "‚ùå"
            summary_message += f"‚Ä¢ {status_icon} {test_name}\n"
        
        send_telegram_message(summary_message)
        print("üì§ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram ‡πÅ‡∏•‡πâ‡∏ß")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô local)
    if not os.getenv('GITHUB_ACTIONS'):
        try:
            filename = f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")
    
    print("\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    
    # Exit code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD
    if report['overall_status'] != 'PASS':
        print("‚ùå ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        sys.exit(1)
    else:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô")
        sys.exit(0)

if __name__ == "__main__":
    main()
